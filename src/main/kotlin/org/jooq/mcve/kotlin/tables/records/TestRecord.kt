/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.tables.Test


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestRecord() : UpdatableRecordImpl<TestRecord>(Test.TEST), Record3<String?, Int?, String?> {

    var companyId: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var allocationId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var name: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, Int?> = super.key() as Record2<String?, Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, Int?, String?> = super.fieldsRow() as Row3<String?, Int?, String?>
    override fun valuesRow(): Row3<String?, Int?, String?> = super.valuesRow() as Row3<String?, Int?, String?>
    override fun field1(): Field<String?> = Test.TEST.COMPANY_ID
    override fun field2(): Field<Int?> = Test.TEST.ALLOCATION_ID
    override fun field3(): Field<String?> = Test.TEST.NAME
    override fun component1(): String? = companyId
    override fun component2(): Int? = allocationId
    override fun component3(): String? = name
    override fun value1(): String? = companyId
    override fun value2(): Int? = allocationId
    override fun value3(): String? = name

    override fun value1(value: String?): TestRecord {
        this.companyId = value
        return this
    }

    override fun value2(value: Int?): TestRecord {
        this.allocationId = value
        return this
    }

    override fun value3(value: String?): TestRecord {
        this.name = value
        return this
    }

    override fun values(value1: String?, value2: Int?, value3: String?): TestRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TestRecord
     */
    constructor(companyId: String? = null, allocationId: Int? = null, name: String? = null): this() {
        this.companyId = companyId
        this.allocationId = allocationId
        this.name = name
    }
}
