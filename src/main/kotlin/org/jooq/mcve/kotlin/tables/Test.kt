/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables


import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.kotlin.Mcve
import org.jooq.mcve.kotlin.keys.PK_PRIMARY_KII
import org.jooq.mcve.kotlin.tables.records.TestRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Test(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TestRecord>?,
    aliased: Table<TestRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TestRecord>(
    alias,
    Mcve.MCVE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>MCVE.TEST</code>
         */
        val TEST = Test()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TestRecord> = TestRecord::class.java

    /**
     * The column <code>MCVE.TEST.COMPANY_ID</code>.
     */
    val COMPANY_ID: TableField<TestRecord, String?> = createField(DSL.name("COMPANY_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "")

    /**
     * The column <code>MCVE.TEST.ALLOCATION_ID</code>.
     */
    val ALLOCATION_ID: TableField<TestRecord, Int?> = createField(DSL.name("ALLOCATION_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>MCVE.TEST.NAME</code>.
     */
    val NAME: TableField<TestRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TestRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>MCVE.TEST</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>MCVE.TEST</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>MCVE.TEST</code> table reference
     */
    constructor(): this(DSL.name("TEST"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TestRecord>): this(Internal.createPathAlias(child, key), child, key, TEST, null)
    override fun getSchema(): Schema = Mcve.MCVE
    override fun getIdentity(): Identity<TestRecord, Int?> = super.getIdentity() as Identity<TestRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TestRecord> = PK_PRIMARY_KII
    override fun getKeys(): List<UniqueKey<TestRecord>> = listOf(PK_PRIMARY_KII)
    override fun `as`(alias: String): Test = Test(DSL.name(alias), this)
    override fun `as`(alias: Name): Test = Test(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Test = Test(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Test = Test(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, Int?, String?> = super.fieldsRow() as Row3<String?, Int?, String?>
}
