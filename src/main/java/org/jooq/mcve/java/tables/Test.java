/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.Keys;
import org.jooq.mcve.java.Mcve;
import org.jooq.mcve.java.tables.records.TestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Test extends TableImpl<TestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.TEST</code>
     */
    public static final Test TEST = new Test();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRecord> getRecordType() {
        return TestRecord.class;
    }

    /**
     * The column <code>MCVE.TEST.COMPANY_ID</code>.
     */
    public final TableField<TestRecord, String> COMPANY_ID = createField(DSL.name("COMPANY_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>MCVE.TEST.ALLOCATION_ID</code>.
     */
    public final TableField<TestRecord, Integer> ALLOCATION_ID = createField(DSL.name("ALLOCATION_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>MCVE.TEST.NAME</code>.
     */
    public final TableField<TestRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    private Test(Name alias, Table<TestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Test(Name alias, Table<TestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MCVE.TEST</code> table reference
     */
    public Test(String alias) {
        this(DSL.name(alias), TEST);
    }

    /**
     * Create an aliased <code>MCVE.TEST</code> table reference
     */
    public Test(Name alias) {
        this(alias, TEST);
    }

    /**
     * Create a <code>MCVE.TEST</code> table reference
     */
    public Test() {
        this(DSL.name("TEST"), null);
    }

    public <O extends Record> Test(Table<O> child, ForeignKey<O, TestRecord> key) {
        super(child, key, TEST);
    }

    @Override
    public Schema getSchema() {
        return Mcve.MCVE;
    }

    @Override
    public Identity<TestRecord, Integer> getIdentity() {
        return (Identity<TestRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestRecord> getPrimaryKey() {
        return Keys.PK_PRIMARY_KII;
    }

    @Override
    public List<UniqueKey<TestRecord>> getKeys() {
        return Arrays.<UniqueKey<TestRecord>>asList(Keys.PK_PRIMARY_KII);
    }

    @Override
    public Test as(String alias) {
        return new Test(DSL.name(alias), this);
    }

    @Override
    public Test as(Name alias) {
        return new Test(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Test rename(String name) {
        return new Test(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Test rename(Name name) {
        return new Test(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
