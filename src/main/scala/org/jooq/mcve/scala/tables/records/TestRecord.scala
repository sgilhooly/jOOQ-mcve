/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.tables.records


import java.lang.Integer
import java.lang.String

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.scala.tables.Test


/**
 * This class is generated by jOOQ.
 */
class TestRecord extends UpdatableRecordImpl[TestRecord](Test.TEST) with Record3[String, Integer, String] {

  /**
   * Setter for <code>MCVE.TEST.COMPANY_ID</code>.
   */
  def setCompanyId(value: String): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>MCVE.TEST.COMPANY_ID</code>.
   */
  def getCompanyId: String = get(0).asInstanceOf[String]

  /**
   * Setter for <code>MCVE.TEST.ALLOCATION_ID</code>.
   */
  def setAllocationId(value: Integer): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>MCVE.TEST.ALLOCATION_ID</code>.
   */
  def getAllocationId: Integer = get(1).asInstanceOf[Integer]

  /**
   * Setter for <code>MCVE.TEST.NAME</code>.
   */
  def setName(value: String): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>MCVE.TEST.NAME</code>.
   */
  def getName: String = get(2).asInstanceOf[String]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record2[String, Integer] = super.key.asInstanceOf[ Record2[String, Integer] ]

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row3[String, Integer, String] = super.fieldsRow.asInstanceOf[ Row3[String, Integer, String] ]

  override def valuesRow: Row3[String, Integer, String] = super.valuesRow.asInstanceOf[ Row3[String, Integer, String] ]
  override def field1: Field[String] = Test.TEST.COMPANY_ID
  override def field2: Field[Integer] = Test.TEST.ALLOCATION_ID
  override def field3: Field[String] = Test.TEST.NAME
  override def component1: String = getCompanyId
  override def component2: Integer = getAllocationId
  override def component3: String = getName
  override def value1: String = getCompanyId
  override def value2: Integer = getAllocationId
  override def value3: String = getName

  override def value1(value: String): TestRecord = {
    setCompanyId(value)
    this
  }

  override def value2(value: Integer): TestRecord = {
    setAllocationId(value)
    this
  }

  override def value3(value: String): TestRecord = {
    setName(value)
    this
  }

  override def values(value1 : String, value2 : Integer, value3 : String): TestRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised TestRecord
   */
  def this(companyId : String, allocationId : Integer, name : String) = {
    this()

    this.setCompanyId(companyId)
    this.setAllocationId(allocationId)
    this.setName(name)
  }
}
